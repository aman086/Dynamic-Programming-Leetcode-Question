/*

You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array nums​​​, return the minimum number of elements to remove to make nums​​​ a mountain array.



Input: nums = [1,3,1]
Output: 0
Explanation: The array itself is a mountain array so we do not need to remove any elements.


Input: nums = [2,1,1,5,6,2,3,1]
Output: 3
Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].

*/


class Solution {
public:
    int minimumMountainRemovals(vector<int>& arr) {
        int n = arr.size();
        if(n<3)
            return 0;
		vector<int> start(n , 0);
		vector<int> end(n , 0);
		end[n-1] = 1;
		for(int i=n-2;i>=0;i--){
			int maxi = 0;
			for(int j=i+1;j<n;j++){

				if(arr[j]<arr[i]){
					maxi = max(maxi , end[j]);
					// end[i] = end[j] + 1;
					// break;
				}

			}
			end[i] = maxi + 1;
		}

		start[0] = 1;
		for(int i=1;i<n;i++){
			int maxi = 0;
			for(int j=i-1;j>=0;j--){

				if(arr[j]<arr[i]){
					maxi = max(maxi , start[j]);
					// start[i] = start[j] + 1;
					// break;
				}

			}
			start[i] = (maxi + 1);
		}


      int ans = 0;
	    for(int i=0;i<arr.size();i++){
            if(start[i] > 1 && end[i]>1) //must be increasing i.e. more element except ith
	            ans = max(ans,start[i] + end[i] - 1);
	    }

        int vl = n - ans;
        if( ans < 3)
            return 0;
        return vl;
    }
};
