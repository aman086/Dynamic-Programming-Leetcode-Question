/*

You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
  arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
  arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.

Input: arr = [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.


Input: arr = [2,2,2]
Output: 0
Explanation: There is no mountain.


*/


 int longestMountain(vector<int>& arr) {
         int n = arr.size();
        if(n<3)
            return 0;
		vector<int> start(n , 0);
		vector<int> end(n , 0);
		end[n-1] = 1;
		for(int i=n-2;i>=0;i--){
            
            if(arr[i+1]<arr[i])
                end[i] = end[i+1]+1;
            else
                end[i] = 1;
		}

		start[0] = 1;
		for(int i=1;i<n;i++){
            if(arr[i-1]<arr[i])
                start[i] = start[i-1]+1;
            else
                start[i] = 1;
		}


       int ans = 0;
	    for(int i=0;i<arr.size();i++){
            if(start[i] > 1 && end[i]>1) //must be increasing i.e. more element except ith
	            ans = max(ans,start[i] + end[i] - 1);
	    }
        return ans;
        
    }
