/*

Given an integer array nums, return the length of the longest strictly increasing subsequence.

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

nput: nums = [0,1,0,3,2,3]
Output: 4

*/


class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        	int n = nums.size();
        vector<int> LongestIncSub(n , 0);
        LongestIncSub[0] = 1;
        for(int i=1;i<n;i++){
        	 int maxi = 0;
        		for(int j=i-1;j>=0;j--){
        			if(nums[i] > nums[j]){
        				maxi = max(maxi , LongestIncSub[j]);
        				// break;
        			}
        		}
        		LongestIncSub[i] = maxi + 1;
        }
        sort(LongestIncSub.begin() , LongestIncSub.end());
        return LongestIncSub[n-1];
    }
};
